# ======================================================================================
# Project metadata
# ======================================================================================

[project]
name = "final_project_btb"
description = "Template for reproducible research projects in economics"
requires-python = ">=3.11"
dynamic = ["version"]
keywords = [
    "Reproducible Research",
    "Economics",
]
classifiers = [
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
]
authors = [
    { name = "BRENDA TORRES BLOMER", email = "s33btorr@uni-bonn.de" },
]
maintainers = [
    { name = "BRENDA TORRES BLOMER", email = "s33btorr@uni-bonn.de" },
]

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.license]
text = "MIT"

[project.urls]
Changelog = "https://github.com/OpenSourceEconomics/econ-project-templates"
Documentation = "https://github.com/OpenSourceEconomics/econ-project-templates"
Github = "https://github.com/OpenSourceEconomics/econ-project-templates"
Tracker = "https://github.com/OpenSourceEconomics/econ-project-templates/issues"

# ======================================================================================
# Build system configuration
# ======================================================================================

[build-system]
requires = ["hatchling", "hatch_vcs"]
build-backend = "hatchling.build"

[tool.hatch.build.hooks.vcs]
version-file = "src/final_project_btb/_version.py"

[tool.hatch.build.targets.sdist]
exclude = ["tests"]
only-packages = true

[tool.hatch.build.targets.wheel]
only-include = ["src"]
sources = ["src"]

[tool.hatch.version]
source = "vcs"

[tool.hatch.metadata]
allow-direct-references = true

# ======================================================================================
# Pytask configuration
# ======================================================================================

[tool.pytask.ini_options]
paths = ["./src/final_project_btb"]
pdbcls = "pdbp:Pdb"

# ======================================================================================
# Ruff configuration
# ======================================================================================

[tool.ruff]
target-version = "py312"
fix = true

[tool.ruff.lint]
select = ["ALL"]
extend-ignore = [
    "ANN",  # Missing type annotations
    "COM812", # Conflict with ruff-format
    "D10",  # Missing docstrings
    "ISC001", # Conflict with ruff-format
    "PD901", # df is a great name with functional data management
    "PLR0913",  # Too many arguments in function definition
    "RET504", # Don't force to calculate upon return
    "S101",  # Use of `assert` detected.
    "S301",  # pickle module is unsafe
    "F841", # Local variable is assigned to but never used
    "TRY003", # Avoid specifying long messages outside the exception class
    "EM102", # Exception must not use an f-string literal, assign to variable first
    "PTH110", # `os.path.exists()` should be replaced by `Path.exists()`
    "UP038", # Use `X | Y` in `isinstance` call instead of `(X, Y)`
    "EM101", # Exception must not use a string literal, assign to variable first
    "PTH113", # `os.path.isfile()` should be replaced by `Path.is_file()`
    "PLR2004", # Magic value used in comparison, consider replacing `2` with a constant variable
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "PD011"]
"task_*.py" = ["ANN", "ARG001"]

[tool.ruff.lint.pydocstyle]
convention = "google"

# ======================================================================================
# Miscellaneous tools configuration
# ======================================================================================


[tool.pytest.ini_options]
addopts = "--pdbcls=pdbp:Pdb"
filterwarnings = []
markers = [
    "wip: Tests that are work-in-progress.",
    "unit: Flag for unit tests which target mainly a single function.",
    "integration: Flag for integration tests which may comprise of multiple unit tests.",
    "end_to_end: Flag for tests that cover the whole program.",
]
norecursedirs = ["docs"]


[tool.yamlfix]
line_length = 88
none_representation = "null"


[tool.codespell]
skip = "*.ipynb,inst/WORDLIST"
